static_resources:
  listeners:
  - address:
      socket_address:
        protocol: tcp
        address: 0.0.0.0
        port_value: 9211
    traffic_direction: INBOUND
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                  headers:
                  - name: content-type
                    exact_match: application/grpc
                route:
                  cluster: local_service_grpc
              - match:
                  prefix: "/"
                route:
                  cluster: local_service
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
              pass_through_mode: true
              headers:
                - name: ":path"
                  exact_match: "/healthcheck"
              cache_time: 2.5s
          - name: envoy.buffer
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.buffer.v2.Buffer
              max_request_bytes: 5242880
          - name: envoy.router
            typed_config: {}
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter:  {}
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/var/log/envoy/ingress_http.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\"\n"

          - name: envoy.file_access_log
            filter:
              and_filter:
                filters:
                  - or_filter:
                      filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 400
                              runtime_key: access_log.access_error.status
                      - status_code_filter:
                          comparison:
                            op: EQ
                            value:
                              default_value: 0
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 2000
                              runtime_key: access_log.access_error.duration
                  - not_health_check_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/var/log/envoy/ingress_http_error.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH):256% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\"\n"

          - name: envoy.file_access_log
            filter:
              and_filter:
                filters:
                - not_health_check_filter: {}
                - runtime_filter:
                    runtime_key:  access_log.ingress_http
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/var/log/envoy/ingress_http_sampled.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH):256% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\"\n"

          common_http_protocol_options:
            idle_timeout: 840s

  - address:
      socket_address:
        protocol: TCP
        port_value: 9001
        address: 127.0.0.1
    traffic_direction: OUTBOUND
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: egress_http
          route_config:
            name: local_route
            virtual_hosts:
            
            - name: service3
              domains:
              - service3
              routes:
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service3
                  retry_policy:
                    retry_on: 5xx
            
            - name: ratelimit
              domains:
              - ratelimit
              routes:
              - match:
                  prefix: "/"
                route:
                  
                  cluster: ratelimit
                  retry_policy:
                    retry_on: 5xx
            
            - name: service1
              domains:
              - service1
              routes:
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service1
                  retry_policy:
                    retry_on: 5xx
            
          add_user_agent: true
          common_http_protocol_options:
            idle_timeout: 840s
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 400
                          runtime_key: access_log.access_error.status
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 2000
                          runtime_key: access_log.access_error.duration
                  - traceable_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/var/log/envoy/egress_http_error.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH):256% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"

          use_remote_address: true
          http_filters:
          - name: envoy.rate_limit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: envoy_service_to_service
              rate_limit_service:
                 grpc_service:
                    envoy_grpc:
                       cluster_name: ratelimit
          - name: envoy.grpc_http1_bridge
            typed_config: {}
          - name: envoy.router
            typed_config: {}

  - address:
      socket_address:
        protocol: TCP
        port_value: 9002
        address: 127.0.0.1
    traffic_direction: OUTBOUND
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: egress_http
          rds:
            config_source:
               api_config_source:
                 api_type: GRPC
                 grpc_services:
                   envoy_grpc:
                     cluster_name: "rds"
            route_config_name: rds_config_for_listener_1
          add_user_agent: true
          common_http_protocol_options:
            idle_timeout: 840s
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 400
                          runtime_key: access_log.access_error.status
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 2000
                          runtime_key: access_log.access_error.duration
                  - traceable_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/var/log/envoy/egress_http_error.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH):256% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\n"

          use_remote_address: true
          http_filters:
          - name: envoy.rate_limit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: envoy_service_to_service
              rate_limit_service:
                 grpc_service:
                    envoy_grpc:
                       cluster_name: ratelimit
          - name: envoy.grpc_http1_bridge
            typed_config: {}
          - name: envoy.router
            typed_config: {}
  - name: "127.0.0.1"
    address:
      socket_address:
        address: "127.0.0.1"
        protocol: TCP
        port_value: 9901
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: AUTO
          common_http_protocol_options:
            idle_timeout: 840s
          stat_prefix: egress_dynamodb_iad
          #update access_logs here
          route_config:
            virtual_hosts:
            
            - name: egress_dynamodb_iad
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: egress_dynamodb_iad
                  retry_policy:
                    retry_on: connect-failure
                  
            
          http_filters:
          - name: envoy.http_dynamo_filter
            typed_config: {}
          - name: envoy.router
            typed_config: {}
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 400
                          runtime_key: access_log.access_error.status
                  - status_code_filter:
                      comparison:
                        op: EQ
                        value:
                          default_value: 0
                          runtime_key: access_log.access_error.status
                  
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 2000
                          runtime_key: access_log.access_error.duration
                  
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
              path: "/var/log/envoy/egress_dynamodb_iad_http_error.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH):256% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%RESP(X-AMZN-RequestId)%\"\n"

              
  - name : "127.0.0.1"
    address:
      socket_address:
        address: "127.0.0.1"
        protocol: TCP
        port_value: 9003
    filter_chains:
    - filters:
      - name: envoy.tcp_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy
          stat_prefix: mongo_somedb
          cluster: mongo_somedb
      - name: envoy.mongo_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.mongo_proxy.v2.MongoProxy
          stat_prefix: "somedb"
          access_log: "/var/log/envoy/mongo_somedb.log"
      
      - name: envoy.ratelimit
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.ratelimit.v3.RateLimit
          stat_prefix: "somedb"
          domain: envoy_mongo_cps
          descriptors:
            entries:
            - key: database
              value: "somedb"
      
  clusters:
  - name: service3
    connect_timeout: 0.250s
    type: EDS
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names:
          - sds
          refresh_delay: 30s
      service_name: service3
    lb_policy: LEAST_REQUEST
    health_checks:
    - http_health_check:
        path: /healthcheck
        service_name_matcher:
          prefix: accidents
      timeout: 2s
      interval: 5s
      interval_jitter: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
    outlier_detection:
      success_rate_stdev_factor: 1900
    http2_protocol_options: {}

  - name: ratelimit
    connect_timeout: 0.250s
    type: EDS
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names:
          - sds
          refresh_delay: 30s
      service_name: ratelimit
    lb_policy: LEAST_REQUEST
    health_checks:
    - http_health_check:
        path: /healthcheck
        service_name_matcher:
          prefix: accidents
      timeout: 2s
      interval: 5s
      interval_jitter: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
    outlier_detection:
      success_rate_stdev_factor: 1900
    http2_protocol_options: {}

  - name: service1
    connect_timeout: 0.250s
    type: EDS
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names:
          - sds
          refresh_delay: 30s
      service_name: service1
    lb_policy: LEAST_REQUEST
    health_checks:
    - http_health_check:
        path: /healthcheck
        service_name_matcher:
          prefix: accidents
      timeout: 2s
      interval: 5s
      interval_jitter: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
    outlier_detection:
      success_rate_stdev_factor: 1900
    http2_protocol_options: {}

  - name: egress_dynamodb_iad
    
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
        common_tls_context:
          validation_context:
            trusted_ca:
              filename: certs/cacert.pem
            
            match_subject_alt_names:
              exact: "['dynamodb.us-east-1.amazonaws.com']"
            
        
    connect_timeout: 1s
    
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: egress_dynamodb_iad
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: dynamodb.us-east-1.amazonaws.com
                port_value: 443
                protocol: TCP
  - name: mongo_somedb
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: RANDOM
    load_assignment:
      cluster_name: mongo_somedb
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: router1.yourcompany.net
                port_value: 27817
                protocol: TCP
        - endpoint:
            address:
              socket_address:
                address: router2.yourcompany.net
                port_value: 27817
                protocol: TCP
        - endpoint:
            address:
              socket_address:
                address: router3.yourcompany.net
                port_value: 27817
                protocol: TCP
        - endpoint:
            address:
              socket_address:
                address: router4.yourcompany.net
                port_value: 27817
                protocol: TCP
        
  - name: main_website
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    # Comment out the following line to test on v6 networks
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: main_website
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: main_website.com
                port_value: 443
                protocol: TCP
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
        sni: www.main_website.com
  - name: local_service
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: main_website
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8080
                protocol: TCP
    circuit_breakers:
      thresholds:
        max_pending_requests: 30
        max_connections: 100
  - name: local_service_grpc
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: local_service_grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8081
                protocol: TCP
    circuit_breakers:
      thresholds:
        max_requests: 200
    dns_lookup_family: V4_ONLY
  - name: rds
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: local_service_grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: rds.yourcompany.net
                port_value: 80
                protocol: TCP
    dns_lookup_family: V4_ONLY
  - name: statsd
    connect_timeout: 0.25s
    type: STATIC
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: statsd
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8125
                protocol: TCP
    dns_lookup_family: V4_ONLY
  - name: lightstep_saas
    connect_timeout: 1s
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: lightstep_saas
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: collector-grpc.lightstep.com
                port_value: 443
                protocol: TCP
    http2_protocol_options:
      max_concurrent_streams: 100
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext
        common_tls_context:
          validation_context:
            trusted_ca:
              filename: certs/cacert.pem
            match_subject_alt_names:
              exact: "collector-grpc.lightstep.com"
  - name: cds_cluster
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: cds_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: cds.yourcompany.net
                port_value: 80
                protocol: TCP
  - name: sds
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: sds
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: discovery.yourcompany.net
                port_value: 80
                protocol: TCP
dynamic_resources:
  cds_config:
    api_config_source:
      api_type: REST
      cluster_names:
      - cds_cluster
      refresh_delay: 30s
cluster_manager: {}
flags_path: "/etc/envoy/flags"
stats_sinks:
  - name: envoy.statsd
    typed_config:
      "@type": type.googleapis.com/envoy.config.metrics.v2.StatsdSink
      tcp_cluster_name: statsd
watchdog: {}
tracing:
  http:
    name: envoy.lightstep
    typed_config:
      "@type": type.googleapis.com/envoy.config.trace.v2.LightstepConfig
      access_token_file: "/etc/envoy/lightstep_access_token"
      collector_cluster: lightstep_saas
layered_runtime:
  layers:
    - name: root
      disk_layer:
        symlink_root: /srv/configset/envoydata/current
        subdirectory: envoy
    - name: override
      disk_layer:
        symlink_root: /srv/configset/envoydata/current
        subdirectory: envoy_override
        append_service_cluster: true
    - name: admin
      admin_layer: {}
admin:
  access_log_path: /var/log/envoy/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901