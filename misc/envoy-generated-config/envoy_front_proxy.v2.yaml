static_resources:
  listeners:
    # TCP listeners for public HTTP/HTTPS endpoints. Assumes a TCP LB in front such as ELB which
    # supports proxy proto.
  - name: not_required_for_static_listeners
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 9300
    filter_chains:
    - transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: h2,http/1.1
            tls_certificates:
            - certificate_chain:
                filename: certs/servercert.pem
              private_key:
                filename: certs/serverkey.pem
      use_proxy_proto: true
      filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: router
          use_remote_address: true
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: www
              domains:
              - www.yourcompany.com
              routes:
              - match:
                  prefix: "/foo/bar"
                  runtime_fraction:
                    default_value:
                      numerator: 0
                      denominator: HUNDRED
                    runtime_key: routing.www.use_service_2
                route:
                  
                  cluster: service2
                  retry_policy:
                    retry_on: 5xx
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service1
                  retry_policy:
                    retry_on: 5xx
              require_tls: ALL
              rate_limits:
                actions:
                  remote_address: {}
            - name: www_redirect
              domains:
              - wwww.yourcompany.net
              routes:
              - match:
                  prefix: "/"
                redirect:
                  host_redirect: www.yourcompany.net
              require_tls: ALL
              rate_limits:
              - actions:
                  remote_address: {}
            - name: api
              domains:
              - api.yourcompany.net
              routes:
              - match:
                  path: "/foo/bar"
                route:
                  
                  cluster: service3
                  retry_policy:
                    retry_on: 5xx
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service1
                  retry_policy:
                    retry_on: 5xx
              require_tls: EXTERNAL_ONLY
              rate_limits:
              - actions:
                  remote_address: {}
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  exact_match: "/healthcheck"
          - name: envoy.buffer
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.buffer.v2.Buffer
              max_request_bytes: 5242880
          - name: envoy.rate_limit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: envoy_front
              request_type: external
              rate_limit_service:
                grpc_service:
                  envoy_grpc:
                    cluster_name: ratelimit
          - name: envoy.router
            typed_config: {}
          add_user_agent: true
          tracing:
            operation_name: INGRESS
          common_http_protocol_options:
            idle_timeout: 840s
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 500
                          runtime_key: access_log.access_error.status
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 1000
                          runtime_key: access_log.access_error.duration
                  - traceable_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog      
              path: "/var/log/envoy/access_error.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%REQ(X-LYFT-USER-ID)%\" \"%RESP(GRPC-STATUS)%\"\n"

  - name: not_required_for_static_listeners
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 9301
    filter_chains:
    
    - transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: h2,http/1.1
            tls_certificates:
            - certificate_chain:
                filename: certs/servercert.pem
              private_key:
                filename: certs/serverkey.pem
            
      
      use_proxy_proto: true
      
    
      filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: router
          use_remote_address: true
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: www
              domains:
              - www.yourcompany.com
              routes:
              - match:
                  prefix: "/foo/bar"
                  runtime_fraction:
                    default_value:
                      numerator: 0
                      denominator: HUNDRED
                    runtime_key: routing.www.use_service_2
                route:
                  
                  cluster: service2
                  retry_policy:
                    retry_on: 5xx
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service1
                  retry_policy:
                    retry_on: 5xx
              require_tls: ALL
              rate_limits:
                actions:
                  remote_address: {}
            - name: www_redirect
              domains:
              - wwww.yourcompany.net
              routes:
              - match:
                  prefix: "/"
                redirect:
                  host_redirect: www.yourcompany.net
              require_tls: ALL
              rate_limits:
              - actions:
                  remote_address: {}
            - name: api
              domains:
              - api.yourcompany.net
              routes:
              - match:
                  path: "/foo/bar"
                route:
                  
                  cluster: service3
                  retry_policy:
                    retry_on: 5xx
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service1
                  retry_policy:
                    retry_on: 5xx
              require_tls: EXTERNAL_ONLY
              rate_limits:
              - actions:
                  remote_address: {}
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  exact_match: "/healthcheck"
          - name: envoy.buffer
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.buffer.v2.Buffer
              max_request_bytes: 5242880
          - name: envoy.rate_limit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: envoy_front
              request_type: external
              rate_limit_service:
                grpc_service:
                  envoy_grpc:
                    cluster_name: ratelimit
          - name: envoy.router
            typed_config: {}
          add_user_agent: true
          tracing:
            operation_name: INGRESS
          common_http_protocol_options:
            idle_timeout: 840s
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 500
                          runtime_key: access_log.access_error.status
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 1000
                          runtime_key: access_log.access_error.duration
                  - traceable_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog      
              path: "/var/log/envoy/access_error.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%REQ(X-LYFT-USER-ID)%\" \"%RESP(GRPC-STATUS)%\"\n"

    # TCP listener for backhaul traffic from the double proxy.
    # See envoy_double_proxy.template.json
  - name: not_required_for_static_listeners
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 9400
    filter_chains:
    
    - transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: h2,http/1.1
            tls_certificates:
            - certificate_chain:
                filename: certs/servercert.pem
              private_key:
                filename: certs/serverkey.pem
            
            validation_context:
              trusted_ca:
                filename: certs/cacert.pm
              #This should be the hash of the /etc/envoy/envoy-double-proxy.pem cert used in the
              #double proxy configuration.
              verify_certificate_hash: "0000000000000000000000000000000000000000000000000000000000000000"
            
      
      use_proxy_proto: true
      
    
      filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: router
          use_remote_address: true
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: www
              domains:
              - www.yourcompany.com
              routes:
              - match:
                  prefix: "/foo/bar"
                  runtime_fraction:
                    default_value:
                      numerator: 0
                      denominator: HUNDRED
                    runtime_key: routing.www.use_service_2
                route:
                  
                  cluster: service2
                  retry_policy:
                    retry_on: 5xx
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service1
                  retry_policy:
                    retry_on: 5xx
              require_tls: ALL
              rate_limits:
                actions:
                  remote_address: {}
            - name: www_redirect
              domains:
              - wwww.yourcompany.net
              routes:
              - match:
                  prefix: "/"
                redirect:
                  host_redirect: www.yourcompany.net
              require_tls: ALL
              rate_limits:
              - actions:
                  remote_address: {}
            - name: api
              domains:
              - api.yourcompany.net
              routes:
              - match:
                  path: "/foo/bar"
                route:
                  
                  cluster: service3
                  retry_policy:
                    retry_on: 5xx
              - match:
                  prefix: "/"
                route:
                  
                  cluster: service1
                  retry_policy:
                    retry_on: 5xx
              require_tls: EXTERNAL_ONLY
              rate_limits:
              - actions:
                  remote_address: {}
          http_filters:
          - name: envoy.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
              pass_through_mode: false
              headers:
                - name: ":path"
                  exact_match: "/healthcheck"
          - name: envoy.buffer
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.buffer.v2.Buffer
              max_request_bytes: 5242880
          - name: envoy.rate_limit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
              domain: envoy_front
              request_type: external
              rate_limit_service:
                grpc_service:
                  envoy_grpc:
                    cluster_name: ratelimit
          - name: envoy.router
            typed_config: {}
          add_user_agent: true
          tracing:
            operation_name: INGRESS
          common_http_protocol_options:
            idle_timeout: 840s
          access_log:
          - name: envoy.file_access_log
            filter:
              or_filter:
                filters:
                  - status_code_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 500
                          runtime_key: access_log.access_error.status
                  - duration_filter:
                      comparison:
                        op: GE
                        value:
                          default_value: 1000
                          runtime_key: access_log.access_error.duration
                  - traceable_filter: {}
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog      
              path: "/var/log/envoy/access_error.log"
              format: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%REQ(X-LYFT-USER-ID)%\" \"%RESP(GRPC-STATUS)%\"\n"

  clusters:
  - name: sds
    type: STRICT_DNS
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: sds
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: discovery.yourcompany.net
                port_value: 80
                protocol: TCP
  - name: statsd
    type: STATIC
    connect_timeout: 0.25s
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: statsd
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8125
                protocol: TCP
  - name: lightstep_saas
    type: LOGICAL_DNS
    connect_timeout: 1s
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: lightstep_saas
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: collector-grpc.lightstep.com
                port_value: 443
                protocol: TCP
    http2_protocol_options: {}
  - name: service3
    connect_timeout: 0.250s
    type: EDS
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names:
          - sds
          refresh_delay: 30s
      service_name: service3
    lb_policy: LEAST_REQUEST
    health_checks:
    - http_health_check:
        path: /healthcheck
        service_name_matcher:
          prefix: accidents
      timeout: 2s
      interval: 5s
      interval_jitter: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
    outlier_detection:
      success_rate_stdev_factor: 1900
    http2_protocol_options: {}

  - name: service2
    connect_timeout: 0.250s
    type: EDS
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names:
          - sds
          refresh_delay: 30s
      service_name: service2
    lb_policy: LEAST_REQUEST
    health_checks:
    - http_health_check:
        path: /healthcheck
        service_name_matcher:
          prefix: accidents
      timeout: 2s
      interval: 5s
      interval_jitter: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
    outlier_detection:
      success_rate_stdev_factor: 1900
    http2_protocol_options: {}

  - name: service1
    connect_timeout: 0.250s
    type: EDS
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names:
          - sds
          refresh_delay: 30s
      service_name: service1
    lb_policy: LEAST_REQUEST
    health_checks:
    - http_health_check:
        path: /healthcheck
        service_name_matcher:
          prefix: accidents
      timeout: 2s
      interval: 5s
      interval_jitter: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
    outlier_detection:
      success_rate_stdev_factor: 1900
    http2_protocol_options: {}

  - name: ratelimit
    connect_timeout: 0.250s
    type: EDS
    eds_cluster_config:
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names:
          - sds
          refresh_delay: 30s
      service_name: ratelimit
    lb_policy: LEAST_REQUEST
    health_checks:
    - http_health_check:
        path: /healthcheck
        service_name_matcher:
          prefix: accidents
      timeout: 2s
      interval: 5s
      interval_jitter: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
    outlier_detection:
      success_rate_stdev_factor: 1900
    http2_protocol_options: {}

  
cluster_manager:
  outlier_detection:
    event_log_path: /var/log/envoy/outlier_events.log
flags_path: /etc/envoy/flags
tracing:
  http:
    name: envoy.lightstep
    typed_config:
      "@type": type.googleapis.com/envoy.config.trace.v2.LightstepConfig
      collector_cluster: lightstep_saas
      access_token_file: "/etc/envoy/lightstep_access_token"
layered_runtime:
  layers:
    - name: root
      disk_layer:
        symlink_root: /srv/configset/envoydata/current
        subdirectory: envoy
    - name: override
      disk_layer:
        symlink_root: /srv/configset/envoydata/current
        subdirectory: envoy_override
        append_service_cluster: true
    - name: admin
      admin_layer: {}
admin:
  access_log_path: /var/log/envoy/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
